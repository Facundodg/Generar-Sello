def ARTIFACT_ID
def IDENTIFICADOR_PROYECTO
def IDENTIFICADOR_UNICO_BUILD
def RAMA_PARA_CLONAR

pipeline {

agent any

/*
agent {
    docker {
      image 'pdmlab/jenkins-node-docker-agent:6.11.1'
    }
  }
*/
    /*

        --HERRAMIENTAS--



    */

    //ESTO LO TENGO QUE CAMBIAR PARA QUE USE PRODUCCION
   tools {
        maven "maven3.8.8"
        jdk 'java21'
        dockerTool 'docker-2'
    }

    environment {

        /*

            --CREDENCIALES--



        */

        //imprime la hora
        HORA_DESPLIEGUE = sh(returnStdout: true, script: "date '+%A %W %Y %X'").trim()

        //--CREDENCIALES DE GIT--
        GITHUB_DESPLIEGUE_URL = "https://github.com/Facundodg/Generar-Sello.git"
        GITHUB_MANIFEST_URL = "https://github.com/dim-desarrollo/manifest"
        GITHUB_CREDENCIALES = "github-test-1"
        GITHUB_CREDENCIALES_DEPLOY = "github-test-1"


        //--CREDENCIALES DE DOCKERHUB--
        DOCKERHUB_CREDENCIALES = "dockerhub"

        //--PUERTOS--
        PUERTO_EXTERNO = 5050

        //--OTROS--
        CANAL_SLACK = "#canal-slack"            // TODO: Por reemplazar
        CORREO_A_NOTIFICAR = "dim@gmail.com"    // TODO: Por reemplazar

        //--CARPETAS--
        CARPETA_APLICACION = './'
        CARPETA_DESPLIEGUE = 'manifest/habilitacion/habilitacion'

        TAG = 004

    }

   stages {

        /*

        stage('Message start deploy') {

            steps {

                discordSend description: "Inicio de deploy PRODUCCION!!!", footer: "Inicado", link: env.BUILD_URL, result: currentBuild.currentResult, title: "Deploy Api-habilitaciones (PRODUCCION)", webhookURL: "https://discord.com/api/webhooks/1173648912838561922/iB8YUryvKbcj66EWQa2e6161BDuygkfaMx57VUalxPnDAMvoRHcYKxJTaxV4nfBEdoxi"

            }

        }

        */


        stage('Iniciando variables') {

            steps {

                dir("${CARPETA_APLICACION}"){

                    script {

                        PROYECTO_VERSION = sh(returnStdout: true, script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout')
                        ARTIFACT_ID = sh(script: "mvn help:evaluate -Dexpression=project.artifactId -f pom.xml -q -DforceStdout", returnStdout: true).trim()
                        IDENTIFICADOR_PROYECTO = "${ARTIFACT_ID}:${PROYECTO_VERSION}"
                        IDENTIFICADOR_UNICO_BUILD = "${IDENTIFICADOR_PROYECTO}.${BUILD_NUMBER}"

                    }

                }


            }

        }

        stage('Tools initialization') {

            steps {

                script {

                    if (env.BRANCH_NAME){

                        RAMA_PARA_CLONAR = env.BRANCH_NAME

                    }
                    else{

                        RAMA_PARA_CLONAR = 'Dev-prueba2'

                    }


                    DOCKER_VERSION = sh(returnStdout: true, script: 'docker version').trim()
                    //DOCKER_COMPOSE_VERSION = sh(returnStdout: true, script: 'docker compose version').trim()
                    JAVA_VERSION = sh(returnStdout: true, script: 'java -version').trim()
                    MAVEN_VERSION = sh(returnStdout: true, script: 'mvn -v').trim()

                    echo "Docker version: ${DOCKER_VERSION}"
                    echo "Java version: ${JAVA_VERSION}"
                    echo "Maven version: ${MAVEN_VERSION}"
                }

            }

        }


        stage('Build Maven') {

            steps{

                    sh "mvn -version"
                    sh "mvn clean package -DskipTests"

                }

            }


        stage('Clone Manifest'){

            environment {

                //CARPETA_MANIFIESTO = "${RAMA_PARA_CLONAR == 'Dev-prueba2' ? 'prod' : 'Dev-prueba2'}"
                DIRECCION_DESPLIEGUE = "${WORKSPACE}/${CARPETA_DESPLIEGUE}"

            }


            steps {

                script {

                    sh "ls ${DIRECCION_DESPLIEGUE}"

                    def directorioTrabajo = env.WORKSPACE

                    sh "ls ${directorioTrabajo}"


                }

                dir ("manifest"){

                    checkout scmGit(branches: [[name: 'master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${DIRECCION_DESPLIEGUE}/manifest"]], userRemoteConfigs: [[credentialsId: "${GITHUB_CREDENCIALES_DEPLOY}", url: "${GITHUB_MANIFEST_URL}"]])

                }



            }


        }


        stage('Build and run') {

            environment{

                PUERTO_INTERNO = 5050
                NOMBRE_CONTENEDOR = "api_habilitacion" 
                IDENTIFICADOR_IMAGEN = "api_habilitacion"
                DIRECCION_DESPLIEGUE = "${WORKSPACE}/${CARPETA_DESPLIEGUE}"


            }

            
            steps {

                script {

                    dir ("${CARPETA_APLICACION}"){

                        sh "docker build -t ${IDENTIFICADOR_IMAGEN}:${TAG} ."

                    }

                    dir ("${DIRECCION_DESPLIEGUE}"){

                    //docker-compose up -d --build --env TAG=003
                    //image: api_habilitacion:${TAG}

                        //sh "ls ${CARPETA_DESPLIEGUE}/habilitacion"
                        //sh "docker compose up --env TAG=${TAG}"
                        sh "docker compose --version"
                        sh "docker compose up --env TAG=${TAG}"
                    }

                }

            }


        }
    
        stage('Message finish deploy') {


            steps {

                discordSend description: "Deploy de estaciones echo en PRODUCCION!!!", footer: "Hora de inicio de despliegue: ${HORA_DESPLIEGUE} ", link: env.BUILD_URL, result: currentBuild.currentResult, title: "Deploy Api-habilitaciones (PRODUCCION)", webhookURL: "https://discord.com/api/webhooks/1173648912838561922/iB8YUryvKbcj66EWQa2e6161BDuygkfaMx57VUalxPnDAMvoRHcYKxJTaxV4nfBEdoxi"

            }

            

        }


   }


 }
